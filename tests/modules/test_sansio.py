from typing import List, Type, Dict, Any, Sequence
import sys
import inspect

import pytest

from spoffy.client.common import ClientCommon
from spoffy.modules import sansio
from spoffy.models.compat import is_union, is_sequence

"""
Quick and dirty autogenerated snapshot tests
for sansio RequestBuilder modules
"""


@pytest.fixture
def client():
    return ClientCommon(
        client_id="fake_client_id",
        client_secret="fake_client_secret",
        access_token="fake_access_token",
    )


builders: List[Type[sansio.RequestBuilder]] = list(
    zip(
        *inspect.getmembers(
            sansio,
            lambda x: inspect.isclass(x)
            and issubclass(x, sansio.RequestBuilder),
        )
    )
)[1]


current_module = sys.modules[__name__]


def make_args(method):
    sig = inspect.signature(method)
    kwargs: Dict[str, Any] = {}
    for name, param in sig.parameters.items():
        anno = param.annotation
        if anno == str:
            kwargs[name] = "abcdefg"
        elif anno == int:
            kwargs[name] = 50
        elif is_union(anno):
            if not hasattr(anno, "__args__"):
                raise RuntimeError("non annotated union arg")
            content_type = anno.__args__[0]
            if content_type == str:
                kwargs[name] = "stringarg"
            elif content_type == int:
                kwargs[name] = 50
        elif is_sequence(anno):
            if not hasattr(anno, "__args__"):
                raise RuntimeError("non annotated argument")
            content_type = anno.__args__[0]
            if content_type == str:
                kwargs[name] = ["a", "b", "c", "d", "e", "f", "g"]

    return kwargs


def make_test_case(mod_class, method_name):
    def test(client, snapshot):
        """
        Tests {}.{}
        """.format(
            mod_class, method_name
        )
        mod = mod_class(client)
        method = getattr(mod, method_name)
        kwargs = make_args(method)
        request = getattr(mod, method_name)(**kwargs)
        snapshot.assert_match(repr(request))

    name = "test_{}_{}".format(mod_class.__name__, method_name)
    setattr(current_module, name, test)


for mod_class in builders:
    method_names = [
        x[0]
        for x in inspect.getmembers(
            mod_class, lambda x: hasattr(x, "__spotify_object__")
        )
    ]
    for mn in method_names:
        make_test_case(mod_class, mn)
